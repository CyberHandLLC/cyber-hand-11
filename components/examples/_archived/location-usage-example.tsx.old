'use client';

/**
 * Location Usage Example Component
 * 
 * Demonstrates how to use the location system in a real-world scenario.
 * This component shows:
 * 1. How to integrate the location context
 * 2. How to request user location with proper consent handling
 * 3. How to display location data and handle loading/error states
 */

import React, { useState, useEffect } from 'react';
import { useLocation } from '@/lib/location/location-context';
import { Button } from '@/components/ui/button';
import { TextSkeleton } from '@/components/ui/skeleton';
import { ErrorDisplay } from '@/components/ui/error-display';
import { cn } from '@/lib/utils';
import { ConsentStatus, ConsentType } from '@/lib/cookies/cookie-manager';

interface LocationUsageExampleProps {
  /** Whether to show the location request UI initially */
  showRequestUI?: boolean;
}

export function LocationUsageExample({ 
  showRequestUI = true 
}: LocationUsageExampleProps) {
  const { 
    locationData, 
    isLocationAllowed, 
    isLoadingLocation, 
    requestLocationPermission,
    clearLocationPermission,
    browserSupportsGeolocation,
    refreshLocation
  } = useLocation();
  
  // We'll use CSS classes directly instead of theme utilities
  const [distanceToHq, setDistanceToHq] = useState<number | null>(null);
  
  // Mock coordinates for demonstration purposes
  const getMockCoordinatesForCity = (city: string): {lat: number, lng: number} | null => {
    // Just some example cities with coordinates
    const cityCoords: Record<string, {lat: number, lng: number}> = {
      'New York': {lat: 40.7128, lng: -74.0060},
      'London': {lat: 51.5074, lng: -0.1278},
      'Tokyo': {lat: 35.6762, lng: 139.6503},
      'Paris': {lat: 48.8566, lng: 2.3522},
      'Sydney': {lat: -33.8688, lng: 151.2093},
      'Unknown': {lat: 40.1234, lng: -73.4567} // Fallback with some mock coordinates
    };
    
    return cityCoords[city] || cityCoords['Unknown'];
  };
  
  // Calculate distance to HQ when location changes
  useEffect(() => {
    if (isLocationAllowed && locationData && !locationData.error) {
      // Get mock coordinates based on city/region for demonstration purposes
      // In a real app, you would store and use actual coordinates from the browser
      const mockCoords = getMockCoordinatesForCity(locationData.city);
      if (mockCoords) {
        // Example: Calculate distance to company HQ (New York coordinates)
        const hqCoords = { lat: 40.7128, lng: -74.0060 };
        const distance = calculateDistance(
          mockCoords.lat,
          mockCoords.lng,
          hqCoords.lat,
          hqCoords.lng
        );
        setDistanceToHq(distance);
      }
    } else {
      setDistanceToHq(null);
    }
  }, [locationData, isLocationAllowed]);
  
  /**
   * Haversine formula to calculate distance between two points
   * @returns distance in kilometers
   */
  function calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {
    const R = 6371; // Radius of the earth in km
    const dLat = deg2rad(lat2 - lat1);
    const dLon = deg2rad(lon2 - lon1);
    const a = 
      Math.sin(dLat/2) * Math.sin(dLat/2) +
      Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
      Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
  }
  
  /**
   * Convert degrees to radians
   */
  function deg2rad(deg: number): number {
    return deg * (Math.PI/180);
  }
  
  /**
   * Handle requesting location
   */
  const handleRequestLocation = async () => {
    await requestLocationPermission();
  };
  
  /**
   * Handle resetting location
   */
  const handleResetLocation = () => {
    clearLocationPermission();
  };
  
  /**
   * Handle updating location
   */
  const handleUpdateLocation = async () => {
    await refreshLocation();
  };
  
  // If browser doesn't support geolocation
  if (!browserSupportsGeolocation) {
    return (
      <div className="bg-gray-800 border border-gray-700 rounded-lg p-4 shadow-lg">
        <div className="text-red-400 mb-4">
          <ErrorDisplay 
            title="Geolocation Not Supported" 
            message="Your browser doesn't support geolocation services."
          />
        </div>
      </div>
    );
  }
  
  return (
    <div className="bg-gray-800 border border-gray-700 rounded-lg p-4 shadow-lg">
      <div className="space-y-4">
        <div className="space-y-2">
          <h3 className="text-lg font-medium">Location Services Example</h3>
          <p className="text-sm text-gray-400">
            This example shows how to implement location-based features with proper consent handling.
          </p>
        </div>
        
        {/* Location Status */}
        <div className="bg-gray-900/50 rounded-md p-4 space-y-3">
          <h4 className="font-medium text-cyan-400">Your Location Status</h4>
          
          {isLoadingLocation ? (
            <div className="space-y-2">
              <TextSkeleton className="w-2/3 h-4" />
              <TextSkeleton className="w-1/2 h-4" />
            </div>
          ) : locationData.error ? (
            <div className="text-red-400 text-sm">
              <p>{locationData.error}</p>
            </div>
          ) : isLocationAllowed && locationData.city !== 'Unknown' ? (
            <div className="space-y-1 text-sm">
              <p>
                <span className="text-gray-400">City:</span> {locationData.city}
              </p>
              <p>
                <span className="text-gray-400">Region:</span> {locationData.region}
              </p>
              {distanceToHq !== null && (
                <p className="mt-2 pt-2 border-t border-gray-700">
                  <span className="text-gray-400">Approx. Distance to New York:</span> {distanceToHq.toFixed(1)} km
                </p>
              )}
            </div>
          ) : (
            <p className="text-sm text-gray-400">
              {!isLocationAllowed 
                ? 'Location access not granted. Please enable location services to see your coordinates.'
                : 'Location information not available. Click the button below to share your location.'}
            </p>
          )}
        </div>
        
        {/* Action Buttons */}
        <div className="flex flex-wrap gap-3">
          {!isLocationAllowed ? (
            <Button
              onClick={handleRequestLocation}
              disabled={isLoadingLocation}
              variant="primary"
            >
              {isLoadingLocation ? 'Getting Location...' : 'Share My Location'}
            </Button>
          ) : (
            <>
              <Button
                onClick={handleUpdateLocation}
                disabled={isLoadingLocation}
                variant="primary"
              >
                {isLoadingLocation ? 'Updating...' : 'Refresh Location'}
              </Button>
              
              <Button
                onClick={handleResetLocation}
                variant="outline"
              >
                Reset Location Permission
              </Button>
            </>
          )}
          
          {!isLocationAllowed && (
            <div className="w-full mt-2 text-xs text-gray-400">
              <p>
                Your privacy is important. We only access your location with your explicit permission.
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}