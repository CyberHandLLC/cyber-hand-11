### Testing & Reliability:

- Configure Jest and React Testing Library
- Create dedicated component tests for UI elements
- Update unit tests when logic changes
- Place tests in /tests folder mirroring main app structure
- Include tests for: expected use, edge case, failure case
- Use snapshot testing for UI components
### Task Completion:

- Mark completed tasks in TASK.md after finishing
- Add discovered sub-tasks to TASK.md under "Discovered During Work"

### Style & Conventions:

- Use TypeScript as primary language
- Follow theme-based styling approach
- Implement Next.js data fetching with Server Components
- Use pydantic for data validation
- Adhere to React 19 and Next.js 15 best practices
- Use memory-efficient state management
- Use FastAPI for APIs and SQLAlchemy/SQLModel for ORM
- Write Google-style docstrings for all functions

### Development Approach:

- Use Server Components for data fetching and non-interactive UI
- Restrict Client Components to interactive elements
- Follow performance optimization practices
- Implement memory profiling during development

### Memory Management:

- Configure IDE for appropriate heap size limits
- Implement workspace-specific memory settings
- Use code splitting to reduce initial load time
- Monitor bundle size impact on memory usage
- Implement proper cleanup for subscriptions and event listeners